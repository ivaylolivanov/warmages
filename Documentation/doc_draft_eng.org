#+Title: IT projekt --- Warmages
#+Startup: showall


* Introduction
   The main goal of the project is to simulate basic physics in virtual environment. For this purpose an environment in the form of simple game was created. It provides an avatar, over which the user has control. This way the player can move across the field and interact with the environment.
In most of the games the standard way of presenting information is via animations. This way motions and moving objects are interacting with the user, creating the sense of immersion, reality and consistency. The systems creating such effects in their core are basically physic engines. Such systems are essentially rule based constructions that generate animations.
That all matter because, considering the computing abilities of modern computers, using more fully implemented physics system is becoming a tendency. This way, the virtual worlds would be created with more immersion and consistency for its player.
 This project is an attempt to create a simple game with mainly the most basic physics implemented - acceleration, collision, collision resolution, basic particles. The programming language, used for developing the project is c++ because it allows strict memory control by the developer,  has better overall performance and makes the code easily portable. The project also uses two third party libraries - SDL2 and SDL2-image. The first one made easier to render and handle events and the second helps loading the 'png' images.
* Overview
  The goal of this section is to present summary of the used architectures, implemented features and a brief description of the phases in the game.
The game loop is the core of every game. It is basically a controlled, infinite loop, that contains the code that provides dynamics and interactivity for the game. It is usually split in different parts, in this project, it is composed of two main components - updating the scene and preparing the objects for drawing and rendering the changes. A third phase precedes these two, but its role is not as composite as the other. During it, the loop merely listens for an event that signals its interruption. Another feature is included in the game loop, but not detached in different structure - normalizing the frame rate. Before the start of the game loop, the program makes sure the needed libraries are correctly initialized, the required textures are loaded, there is an avatar, created for the user and sets up the initial scene of the environment.
During the update phase all the objects are prepared to be rendered. In other words the code that implements the movement of the objects, the collision detection and resolution, user interaction, dealing damage and similar activities is being executed. If an object is "destroyed" or "defeated" it is removed from the scene.
The second and final phase of the game loop is rendering the result of the previous phase. The order of displaying the objects on the screen is sequential. It is very important for the terrain to be drawn first and then everything else because it could draw the player's avatar underneath the map. This way the user would not be able to see the character, because the tiles of the area would be drawn over the sprite of the character. The exact rendering order is first - the map, because everything is supposed to be on the surface of the environment, then the player's avatar - it is the next most persistent object in the scene. After that the projectiles and the other game object like boxes and stones are displayed.
** INCLUDE THE IMAGE - SCHEME FOR ENTITY COMPONENT SYSTEM
   The organization of the data in the game is handled with simple implementation of the design pattern 'Entity-Component-System'. Using its philosophy, the properties of the objects in the game are presented as 'Components', which give functionality to an 'Entity', when attached to it. All of the 'Entities', the created ones and the ones to be created, are controlled (managed) by the 'Manager'.
One can think of 'Component' as containers. They do not possess complex logic. Each type of a component can be attached to an entity to provide some sort of a property. For example a 'Collider-component' makes an 'Entity' a rigid object.
The 'Entities' are mainly used to provide an unique identifier, this way the environment becomes aware of the existence of single, individual thing. An 'Entity' functions as root object, that bundles set of 'components'.
The 'Manager' functions as the 'System' part of the implemented design pattern. It does not own any 'entity', but access them to manage their and components' file-cycle.
* Physics
  This section is a walkthrough of the implemented physics features - collision detection, collision resolution, acceleration and basic particles. each of them is going to be separately described.
  Taking look at the transform component, one can notice that it sets the position of an object, its size and the ability to be moved, when the velocity is set to something different than 0. The principle of acceleration of the objects in the game is implemented in this component. When an entity get a transform component, its velocity is set to 0, because, by default the game objects are immobile.
#+BEGIN_CODE c++
void init() override {
    velocity.zero();
    this->acceleration = 0;
}
#+END_CODE
To make the implementation full, the acceleration has to have top limit. If there is not such thing, the movable characters in the game reach speed, with which they are uncontrollable and break the immersion of the player, by not presenting the reality. Assigning the component to an entity that has assigned controller, give mobility to the entity.
#+BEGIN_CODE c++
switch ( Game::event.key.keysym.sym ) {
    case SDLK_w:
        transform->getVelocity().setY( -1 );
        sprite->play( "walkUp" );
        break;
    case SDLK_a:
        transform->getVelocity().setX( -1 );
	sprite->play( "walkSideway" );
	sprite->spriteFlip = SDL_FLIP_HORIZONTAL;
	break;
    case SDLK_d:
	transform->getVelocity().setX( 1 );
	sprite->play( "walkSideway" );
	break;
    case SDLK_s:
        transform->getVelocity().setY( 1 );
	sprite->play( "walkDown" );
	break;
#+END_CODE
The keyboard controller sets the velocity of an entity to either 1 or -1 on the given axis in a coordinate system based on the pressed key.
#+BEGIN_CODE c++
switch ( Game::event.key.keysym.sym ) {
    case SDLK_w:
	transform->decAcceleration( 0.3 );
	sprite->play( "idle" );
	break;
    case SDLK_a:
	transform->decAcceleration( 0.3 );
	sprite->play( "idle" );
	sprite->spriteFlip = SDL_FLIP_NONE;
	break;
    case SDLK_d:
	transform->decAcceleration( 0.3 );
	sprite->play( "idle" );
	break;
    case SDLK_s:
	transform->decAcceleration( 0.3 );
	sprite->play( "idle" );
	break;
#+END_CODE
When a pressed key is released, the velocity is set back to 0 and the accumulated acceleration is decreased gradually. This way the given entity receives acceleration.
The moving game objects create danger of collision and raise the question how this collision should be resolved. In order to describe the implementation of the collision and its resolution, one first should take look at how the colliders are presented within the game.
#+BEGIN_CODE c++
class ColliderComponent : public Component
{
private:
    std::string tag;
    SDL_Rect collider;
    TransformComponent* transform;
#+END_CODE
The collider is rectangle, bounded around a given entity. It has tag, which is used during the collision resolution. Based on the tag different resolutions are undertaken. The transform component, sets the position of the collider.

* TODO Give definitions of basic terms. [/]
  - [ ] acceleration
  - [ ] velocity
  - [ ] speed

* TODO Set term for something that is in the game as being, creature and just as an static, immovable object.
