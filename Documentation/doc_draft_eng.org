#+Title: IT projekt --- Warmages
#+Startup: showall


* Introduction
   The main goal of the project is to simulate basic physics in virtual environment. For this purpose an environment in the form of simple game was created. It provides an avatar, over which the user has control. This way the player can move across the field and interact with the environment.
In most of the games the standard way of presenting information is via animations. This way motions and moving objects are interacting with the user, creating the sense of immersion, reality and consistency. The systems creating such effects in their core are basically physic engines. Such systems are essentially rule based constructions that generate animations.
That all matter because, considering the computing abilities of modern computers, using more fully implemented physics system is becoming a tendency. This way, the virtual worlds would be created with more immersion and consistency for its player.
 This project is an attempt to create a simple game with mainly the most basic physics implemented - acceleration, collision, collision resolution, basic particles implemented as projectiles. The programming language, used for developing the project is c++ because it allows strict memory control by the developer,  has better overall performance and makes the code easily portable. The project also uses two third party libraries - SDL2 and SDL2-image. The first one made easier to render and handle events and the second helps loading the 'png' images.
* Overview
  The goal of this section is to present summary of the used architectures, implemented features and a brief description of the phases in the game.
The game loop is the core of every game. It is basically a controlled, infinite loop, that contains the code that provides dynamics and interactivity for the game. It is usually split in different parts, in this project, it is composed of two main components - updating the scene and preparing the objects for drawing and rendering the changes. A third phase precedes these two, but its role is not as composite as the other. During it, the loop merely listens for an event that signals its interruption. Another feature is included in the game loop, but not detached in different structure - normalizing the frame rate. Before the start of the game loop, the program makes sure the needed libraries are correctly initialized, the required textures are loaded, there is an avatar, created for the user and sets up the initial scene of the environment.
During the update phase all the objects are prepared to be rendered. In other words the code that implements the movement of the objects, the collision detection and resolution, user interaction, dealing damage and similar activities is being executed. If an object is "destroyed" or "defeated" it is removed from the scene.
The final phase of the game loop is rendering the result of the previous phase. The order of displaying the objects on the screen is sequential. It is very important for the terrain to be drawn first and then everything else because it could draw the player's avatar underneath the map causing the tiles of the area to be drawn over the sprite of the character resulting in the user not seeing the character. The exact rendering order is first - the map, because everything is supposed to be on the surface of the environment, then the player's avatar - it is the next most persistent object in the scene. After that the projectiles and the other game object like boxes and stones are displayed.
** INCLUDE IMAGE - SCHEME FOR ENTITY COMPONENT SYSTEM
   The organization of the data in the game is handled with simple implementation of the design pattern 'Entity-Component-System'. Adhering to its philosophy, the properties of the objects in the game are presented as 'Components', which give functionality to an 'Entity', when attached to it. All of the 'Entities', the created ones and the ones to be created, are controlled (managed) by the 'Manager'.
One can think of 'Component' as containers. They do not possess complex logic. Each type of a component can be attached to an entity to provide some sort of a property. For example a 'Collider-component' makes an 'Entity' a rigid object.
The 'Entities' are mainly used to provide an unique identifier, this way the environment becomes aware of the existence of single, individual thing. An 'Entity' functions as root object, that bundles set of 'components'.
The 'Manager' functions as the 'System' part of the implemented design pattern. It does not own any 'entity', but access them to manage their and components' file-cycle.
* Physics
  This section is a walkthrough of the implemented physics features - collision detection, collision resolution, acceleration and basic particles. each of them is going to be separately described.
  Taking look at the transform component, one can notice that it sets the position of an object, its size and the ability to be moved, when the velocity is set to something different than 0. The principle of acceleration of the objects in the game is implemented in this component. When an entity get a transform component, its velocity is set to 0, because, by default the game objects are immobile.
#+BEGIN_CODE c++
void init() override {
    velocity.zero();
    this->acceleration = 0;
}
#+END_CODE
To make the implementation full, the acceleration has to have top limit. If there is not such thing, the movable characters in the game reach speed, with which they are uncontrollable and break the immersion of the player, by not presenting the reality. Assigning the component to an entity that has assigned controller, give mobility to the entity.
#+BEGIN_CODE c++
switch ( Game::event.key.keysym.sym ) {
    case SDLK_w:
        transform->getVelocity().setY( -1 );
        sprite->play( "walkUp" );
        break;
    case SDLK_a:
        transform->getVelocity().setX( -1 );
	sprite->play( "walkSideway" );
	sprite->spriteFlip = SDL_FLIP_HORIZONTAL;
	break;
    case SDLK_d:
	transform->getVelocity().setX( 1 );
	sprite->play( "walkSideway" );
	break;
    case SDLK_s:
        transform->getVelocity().setY( 1 );
	sprite->play( "walkDown" );
	break;
#+END_CODE
The keyboard controller sets the velocity of an entity to either 1 or -1 on the given axis in a coordinate system based on the pressed key.
#+BEGIN_CODE c++
switch ( Game::event.key.keysym.sym ) {
    case SDLK_w:
	transform->decAcceleration( 0.3 );
	sprite->play( "idle" );
	break;
    case SDLK_a:
	transform->decAcceleration( 0.3 );
	sprite->play( "idle" );
	sprite->spriteFlip = SDL_FLIP_NONE;
	break;
    case SDLK_d:
	transform->decAcceleration( 0.3 );
	sprite->play( "idle" );
	break;
    case SDLK_s:
	transform->decAcceleration( 0.3 );
	sprite->play( "idle" );
	break;
#+END_CODE
When a pressed key is released, the velocity is set back to 0 and the accumulated acceleration is decreased gradually. This way the given entity receives acceleration.
The moving game objects create danger of collision and raise the question how this collision should be resolved. In order to describe the implementation of the collision detection and its resolution, one first should take look at how the colliders are presented within the game.
#+BEGIN_CODE c++
class ColliderComponent : public Component
{
private:
    std::string tag;
    SDL_Rect collider;
    TransformComponent* transform;
}
#+END_CODE
** INCLUDE IMAGE - COLLIDER
The collider is rectangle, bounded around a given entity. It has its four axes aligned with the coordinate system, in which it resides. Which means the box cannot rotate itself. The collider is represented with class.
#+BEGIN_CODE c++
class ColliderComponent : public Component
{
private:
    std::string tag;
    SDL_Rect collider;
    TransformComponent* transform;
...
};
#+END_CODE
To define the collider the type 'SDL_Rect' is used. The implementation uses tags to differentiate between different types of colliders, for example colliders for the terrain and the collider for the player. The tag has important role in the resolution of the collisions. The field of type 'TransformComponent' is initiated with the transform component of the whole entity. It is used to update the position and size of the collider.
The collision detection happens in the update phase of the game loop. The very detection is simple implementation of the 'Axis aligned bounding box' method. The current implementation of the algorithm searches for a gap between any of the sides of two colliders. If none is found then there is no collision and a collision is searched between other two objects. Otherwise there is collision and an according resolution is undertaken. However, before any collision resolution happens the current position of the player is saved in a variable. This way, the position of the player is saved in case he
#+BEGIN_CODE c++
Vector2D playerPos  = player.getComponent< TransformComponent >().getPosition();
#+END_CODE
enters in a collision with another game object and the player must not pass through it. When such collision happens this position is used to ``reset'' the player on the place where he was.
Because of the different types of collision resolutions, the detection of collision occurrence is done by steps. The first collision check is done for the player and every other collider. This way the created virtual environment would not allow going through any object, making each object rigid.
#+BEGIN_CODE c++
for( auto& coll : colliders )
    {
	SDL_Rect tempColl = coll->getComponent< ColliderComponent >().getCollider();
	if( Collision::AABB( tempColl, playerColl ) )
	{
	    player.getComponent< TransformComponent >().setPosition( playerPos );
	}
    }
#+END_CODE
The next check for collision is for the projectiles. First is checked if a projectile has hit the player. In the current version, however it is redundant because the game environment does not have anything else that fires projectiles, except the player. The check is done in two step because there are different styles of collision resolution. The resolution for a projectile hitting a player is to first print a console message for debugging purposes and then destroy the projectile. The resolution for a projectile hitting a game object is different because the game object should move if it is not static, in other words the game object functions like part of the terrain. The game objects have durability, which decreases with each hit of projectile. The static game objects have almost infinite durability. Which is why the resolution is done in different steps. The movable objects in the game scene are visualized as boxes. When projectile hits a box the step with which the projectile is moving is set as step to the box. The acceleration and the velocity of the projectile are also given to the box. This way is simulated the impulse, which should be passed to the game object when something hits it, in this case the projectile. After the passing of the impulse is done the durability of the object is decreased and the projectile is destroyed.
#+BEGIN_CODE c++
	    if( Collision::AABB(
		    proj->getComponent< ColliderComponent >().getCollider(),
		    gObj->getComponent< ColliderComponent >().getCollider() ) &&
		!gObj->getComponent< ObjectComponent >().getIsStatic() )
	    {
		printf( "An object was hit!\n" );
		proj->destroy();
		gObj->getComponent< TransformComponent >().setStep( proj->getComponent< TransformComponent >().getStep() );
		gObj->getComponent< TransformComponent >().setAcceleration( proj->getComponent< TransformComponent >().getAcceleration() );
		gObj->getComponent< TransformComponent >().setVelocity( proj->getComponent< TransformComponent >().getVelocity() );
		gObj->getComponent< ObjectComponent >().decDurability( 1 );
	    }
#+END_CODE
The third different projectile collision resolution is done for projectile hitting a static game object, in which case a message printed, then the projectile is destroyed and the object takes decrease in its durability.
#+BEGIN_CODE c++
if( Collision::AABB(
    proj->getComponent< ColliderComponent >().getCollider(),
    gObj->getComponent< ColliderComponent >().getCollider() )
    &&  gObj->getComponent< ObjectComponent >().getIsStatic() )
    {
	printf( "An static game object was hit.\n" );
	proj->destroy();
	gObj->getComponent< ObjectComponent >().decDurability( 1 );
    }
#+END_CODE
When the player's avatar bumps into movable game object it is resolved similarly to when a projectile hits a box. The step, acceleration and the velocity of the player is given to the box, while the avatar is returned to his position before the collision. The acceleration of the player's character is set to zero.
#+BEGIN_CODE c++
player.getComponent< TransformComponent >().setPosition( playerPos );
gObj->getComponent< TransformComponent >().setStep( player.getComponent< TransformComponent >().getStep() );
gObj->getComponent< TransformComponent >().setAcceleration( player.getComponent< TransformComponent >().getAcceleration() );
gObj->getComponent< TransformComponent >().setVelocity( player.getComponent< TransformComponent >().getVelocity() );
player.getComponent< TransformComponent >().setAcceleration( 0.0f );
#+END_CODE
Colliding the player with a static game object, functions like bumping the character of the user into the end of the map. His position is reset on the one before the collision and his acceleration is set to 0.
#+BEGIN_CODE c++
		player.getComponent< TransformComponent >().setPosition( playerPos );
		player.getComponent< TransformComponent >().setAcceleration( 0 );
#+END_CODE
The most complicated resolution is between two game objects. This might be induced when the user bumps into a game object and this game object is in a close proximity to another one and hits it. The resolution uses the position of a game object to remember where the object was before it bumped into another game object. When collision arises the object that was pushed into the one around it passes its step, acceleration and velocity to the other game object. After that its acceleration is set to 0.
#+BEGIN_CODE c++
nextGObj->getComponent< TransformComponent >().setStep( gObj->getComponent< TransformComponent >().getStep() );
nextGObj->getComponent< TransformComponent >().setAcceleration( gObj->getComponent< TransformComponent >().getAcceleration() );
nextGObj->getComponent< TransformComponent >().setVelocity( gObj->getComponent< TransformComponent >().getVelocity() );
#+END_CODE
When a game object is pushed into a static, immovable game object, it is reset on its position before the collision. Its acceleration is acceleration is set to 0 as well.
Considered also part of the implementation of physics is the implementation of projectile as component. A projectile is defined by its current position in the virtual world, the maximum range it should travel before it is destroyed, the currently covered distance and its velocity.
#+BEGIN_CODE c++
TransformComponent* transform;
int range    = 0;
int speed    = 0;
int distance = 0;
Vector2D velocity;
#+END_CODE
The projectile is destroyed if it has covered its set max range or to make the performance better when the projectile is no longer in the vision filed of the user. When either of the cases occurs, an according message is displayed.
#+BEGIN_CODE c++
if( distance > range )
{
    printf("Out of range\n");
    entity->destroy();
}
else if( transform->getXPos() > Game::camera.x + Game::camera.w ||
    transform->getXPos() < Game::camera.x ||
    transform->getYPos() > Game::camera.y + Game::camera.h ||
    transform->getYPos() < Game::camera.y )
{
    printf("Out of bounds\n");
    entity->destroy();
}
#+END_CODE




* TODO Describe the properties of a game object (mainly because of the mass of it)
* TODO Give definitions of basic terms. [/]
  - [ ] acceleration
  - [ ] velocity
  - [ ] speed

* TODO Set term for something that is in the game as being, creature and just as an static, immovable object.
